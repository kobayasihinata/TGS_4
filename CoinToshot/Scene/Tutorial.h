#pragma once
#include "../Utility/common.h"
#include "../Utility/Vector2D.h"
#include "TutoType.h"
#include "../Utility/InputPad.h"
#include "Dxlib.h"

#define FADE_TIME	 20	//チュートリアルテキストのフェードイン、アウトにかかるフレーム数
#define TEXT_BOX	 32		//ひとつずつの画像大きさ

class Tutorial
{
private:
	bool tutorial_flg;	//チュートリアル中か判断
	bool tuto_stop_flg;	//チュートリアルの為に、オブジェクトを止める必要があるか

	TutoType now_tuto;	//現在実行中のチュートリアルを格納

	int timer;			//チュートリアル実行時間測定
	float text_alpha;	//フェードイン、アウトの制御
	int stick_anim;		//スティックを回すアニメーション用
	int button_anim;		//ボタンアニメーション用

	int l_stick[4] = { L_STICK_UP,L_STICK_RIGHT,L_STICK_DOWN,L_STICK_LEFT };//表示順
	int r_stick[4] = { R_STICK_UP,R_STICK_RIGHT,R_STICK_DOWN,R_STICK_LEFT };//表示順
	int text_box[3];	//テキストボックス 辺、角、内側で３種類格納
	int generate_text_box;	//生成したテキストボックスを格納する場所
	Vector2D text_box_loc;		//テキストボックス表示位置
	Vector2D text_box_size;		//テキストボックス大きさ

	bool tuto_executed_flg[TUTO_NUM];	//チュートリアルを既に行ったか判断
public:


private:
	//コンストラクタをprivateにすることで、
//自クラスのメンバ関数でインスタンスを生成できないようにする
	Tutorial() = default;

	//コピーガード
	//クラス外でインスタンスを生成して渡すことができないようにする
	Tutorial(Tutorial& v) = default;
	Tutorial& operator = (const Tutorial& v) = delete;
	~Tutorial() = default;
public:
	//インスタンスを取得する処理
	static Tutorial* Get();
public:
	//初期化(リセット)
	void Initialize();

	//更新
	void Update();

	//描画
	void Draw()const;

	//チュートリアル中か取得
	bool GetTutorialFlg()const { return tutorial_flg; }
	//現在のチュートリアルを取得
	TutoType GetNowTutorial()const { return now_tuto; }
	//オブジェクト停止状態か取得
	bool GetTutoStopFlg()const { return tuto_stop_flg; }
	//指定したチュートリアルが終わっているか取得
	bool GetIsEndTutorial(TutoType _type)const { return tuto_executed_flg[_type]; }
	//指定したチュートリアルが終わっている、または現在そのチュートリアル中か取得
	bool GetTutoNowEnd(TutoType _type)const {
		return GetIsEndTutorial(_type) || GetNowTutorial() == _type;
	}

	//チュートリアル開始リクエストを送る _loc=チュートリアルを呼び出したい座標
	bool StartTutoRequest(TutoType _type,Vector2D _loc = 0);

	//チュートリアル毎の初期化
	void InitTuto(TutoType _type, Vector2D _loc);


	//テキスト表示用箱生成
	void CreateTextBox()const;

	//パーツからテキストボックスを生成
	void GenerateTextBox(Vector2D _size)const;


	//時間経過で終了するタイプのチュートリアルの基礎更新
	void UpdateTimeTuto();
	//特定のアクションで終了するタイプのチュートリアルの基礎更新
	void UpdatePracticeTuto();

	//ルール説明描画
	void DrawRule()const;

	//移動説明更新
	void UpdateMove();
	//移動説明描画
	void DrawMove()const;

	//照準説明更新
	void UpdateAim();
	//照準説明描画
	void DrawAim()const;

	//攻撃説明更新
	void UpdateAttack();
	//攻撃説明描画
	void DrawAttack()const;
};
